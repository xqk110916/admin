/**
 * 认购期权理论价
 * param dprice-当前标的价格                S
 * param dsigma-年波动率  < 1.0            σ(sigma)
 * param driskfreerate-无风险利率          r
 * param dtargetprice-执行价（元）         X
 * param dT_t-到期时间(年)                T_t，比如剩余天数为1，则为 1/365
 * return double-认购期权理论价
 */
// 调用例子：
// window.CalcCall(dprice, dsigma, driskfreerate, dtargetprice, dT_t);
/**
 * 认沽期权理论价
 * param dprice-当前标的价格                S
 * param dsigma-年波动率  < 1.0            σ(sigma)
 * param driskfreerate-无风险利率          r
 * param dtargetprice-执行价（元）       X
 * param dT_t-到期时间(年)                T_t，比如剩余天数为1，则为 1/365
 * return double-认沽期权理论价
 */
// 调用例子：
// window.CalcPut(dprice, dsigma, driskfreerate, dtargetprice, dT_t);
function Price(){

}
Price.prototype.Normal = function(z) {
    var PI = 3.141592653589793;
    var temp;
    temp = Math.exp(-1 * z * z / 2) / Math.sqrt(2 * PI);
    return temp
}
Price.prototype.NormSDist = function (z) {
    if (z > 6) return 1;
    if (z < -6) return 0;
    var gamma = .2316419,
        a1 = .31938153,
        a2 = -.356563782,
        a3 = 1.781477937,
        a4 = -1.821255978,
        a5 = 1.330274429;
    var k = 1 / (1 + Math.abs(z) * gamma);
    var n = k * (a1 + k * (a2 + k * (a3 + k * (a4 + k * a5))));
    n = 1 - this.Normal(z) * n;
    if (z < 0) return 1 - n;
    return n
}
Price.prototype.CalcD1 = function (dprice, dsigma, dtargetprice, dT_t) {
    var L01 = Math.log(dprice / dtargetprice);
    var L02 = Math.pow(dsigma, 2) / 2 * dT_t;
    var L03 = dsigma * Math.sqrt(dT_t);
    var d1 = (L01 + L02) / L03;
    return d1
}
Price.prototype.CalcD2 = function(d1, dsigma, dT_t) {
    var L03 = dsigma * Math.sqrt(dT_t);
    var d2 = d1 - L03;
    return d2
}
Price.prototype.Nd = function(dvalue) {
    var dv = this.NormSDist(dvalue);
    return dv
}
Price.prototype.CalcCall = function(dprice, dsigma, driskfreerate, dtargetprice, dT_t) {
    var d1 = this.CalcD1(dprice, dsigma, dtargetprice, dT_t);
    var d2 = this.CalcD2(d1, dsigma, dT_t);
    var Nd1 = this.Nd(d1);
    var Nd2 = this.Nd(d2);
    var dResult = dprice * Math.exp(-1 * driskfreerate * dT_t) * Nd1 - dtargetprice * Math.exp(-1 * driskfreerate * dT_t) * Nd2;
    return dResult
}
Price.prototype.CalcPut = function(dprice, dsigma, driskfreerate, dtargetprice, dT_t) {
    var d1 = this.CalcD1(dprice, dsigma, dtargetprice, dT_t);
    var d2 = this.CalcD2(d1, dsigma, dT_t);
    var Nd1 = this.Nd(-1 * d1);
    var Nd2 = this.Nd(-1 * d2);
    var dResult = dtargetprice * Math.exp(-1 * driskfreerate * dT_t) * Nd2 - dprice * Math.exp(-1 * driskfreerate * dT_t) * Nd1;
    return dResult
} 
//日期函数
Price.prototype.ThirdDate = function(rd,minDay){
	var myDate = new Date();
	var date1 = new Date(myDate);
	var date2 = new Date(myDate);
	var date3 = new Date(myDate);
	var NowMon;
	var NowDay
	if((date1.getMonth()+1)<10){
		NowMon = "0"+(date1.getMonth()+1);
	}
	else{
		NowMon = date1.getMonth()+1;
	}
	if(date1.getDate()<10){
		NowDay = "0"+(date1.getDate());
	}else{
		NowDay = date1.getDate();
	}
	var NowDayCom = (date1.getFullYear() + "" + NowMon + "" + NowDay);
	var NowDay = (date1.getFullYear() + "-" + NowMon + "-" + NowDay);
	let OneMonth=minDay;
	date2.setDate(myDate.getDate() + minDay);
	if(date2.getDay()==6){
	 	OneMonth=OneMonth+2;
	}else if(date2.getDay()==0){
	 	OneMonth=OneMonth+1;
	}else{
		OneMonth=OneMonth;
	}
	date3.setDate(myDate.getDate()+OneMonth);
	var mon;
	var day;
	if((date3.getMonth()+1)<10){
		mon = "0"+(date3.getMonth()+1)
	}else{
		mon = date3.getMonth()+1;
	}
	if(date3.getDate()<10){
		day = "0"+(date3.getDate());
	}else{
		day = date3.getDate();
	}
	var OneMonthDayCom = (date3.getFullYear() + "" + mon + "" + day);
    var OneMonthDay = (date3.getFullYear() + "-" + mon + "-" + day);
	if(rd.length!=0){
		for(var i=0;i<rd.length;i++){
            var fullyear = Number(OneMonthDayCom.toString().substring(0,4));
            var month = Number(OneMonthDayCom.toString().substring(4,6))-1;
            var oday = Number(OneMonthDayCom.toString().substring(6,8));
            if(rd[i] == OneMonthDayCom){
                var da = new Date(fullyear,month,oday);
                oneday=1;
                da.setDate(da.getDate() + oneday);
                if(da.getDay()==6){
                    oneday=oneday+2;
                }else if(da.getDay()==0){
                    oneday=oneday+1;
                }else{
                    oneday=oneday;
                }
                da.setDate(da.getDate()+oneday-1);
                var mon;
                var day;
                if((da.getMonth()+1)<10){
                    mon = "0"+(da.getMonth()+1)
                }else{
                    mon = da.getMonth()+1;
                }
                if(da.getDate()<10){
                    day = "0"+(da.getDate());
                }else{
                    day = da.getDate();
                }
                OneMonthDayCom = (da.getFullYear() + "" + mon + "" + day);
                OneMonthDayCom = Number(OneMonthDayCom);
                OneMonthDay = (da.getFullYear() + "-" + mon + "-" + day);
            }else{
                OneMonthDayCom = OneMonthDayCom;
                OneMonthDay = OneMonthDay;
            }
        }
        OneMonthDayCom = OneMonthDayCom.toString()
    }
    return [OneMonthDayCom,OneMonthDay,NowDayCom,NowDay];
}
//计算天数差的函数
Price.prototype.DateDiff = function(sDate1,sDate2){    //sDate1和sDate2是20021218格式  
   var oDate1,  oDate2, iDays  
   oDate1  =  new  Date(sDate1.substring(0,4)   +  '-'  +  sDate1.substring(4,6)  +  '-'  +  sDate1.substring(6,8))
   oDate2  =  new  Date(sDate2.substring(0,4)   +  '-'  +  sDate2.substring(4,6)  +  '-'  +  sDate2.substring(6,8))
   iDays  =  parseInt(Math.abs(oDate1  -  oDate2)  /  1000  /  60  /  60  /24)    //把相差的毫秒数转换为天数  
   return  iDays
}
//将19951226转换成1995-12-26
Price.prototype.DateStringChange = function(dd){
	dd = dd.toString();
   	var ss = dd.substring(0,4)   +  '-'  +  dd.substring(4,6)  +  '-'  +  dd.substring(6,8)
   	return ss;
}
//扣减天数函数
Price.prototype.Deduction = function(nowday,thday,asd){
	var bid_deduction=0;
	var ask_deduction=0;
	if(asd.length!=0){
		for(var i=0;i<asd.length;i++){
			if(nowday<asd[i].festival_date){
				break; 
			}
		}
		for(var j=0;j<asd.length;j++){
			if(thday<asd[j].festival_date){
				break; 
			}
		}
		for(var k=0;k<asd.length;k++){
			if(k>i-1 && k<j){
				bid_deduction=bid_deduction+asd[k].bid_deduction
			}
		}
		for(var q=0;q<asd.length;q++){
			if(q>i-1 && q<j){
				ask_deduction=ask_deduction+asd[q].ask_deduction
			}
		}
	}else{
		bid_deduction=0;
		ask_deduction=0
	}
	return  [bid_deduction,ask_deduction]
}
//计算节假日节假日函数
Price.prototype.rest_day = function(rday){
 	var arr=[];
	for(var i=0;i<rday.length;i++){
		var year = Number(rday[i].toString().substring(0,4));
		var mon = Number(rday[i].toString().substring(4,6));
		var day = Number(rday[i].toString().substring(6,8));
		var fd = year+"-"+mon+"-"+day;
		arr.push(fd);
	}
	return arr;
}
Price.prototype.GetNumber = function(N){
    var ThisTime = N.split("-");
    var year = ThisTime[0];
    var month = ThisTime[1];
    var day = ThisTime[2];
    if(month < 10){
        month = "0"+month
    }else{
        month = month
    }
    if(day < 10){
        day = "0"+day
    }else{
        day = day
    }
    var ThisTime = year + "" + month + "" + day;
    var ThisTime = Number(ThisTime);
    return ThisTime;
}
//T型界面获取当前日期
Price.prototype.T_data = function(tt){
 	var myDate = new Date();      
	var date2 = new Date(myDate);
	date2.setDate(myDate.getDate() + tt);
	var mon;
	var day;
	if((date2.getMonth()+1)<10){
		mon = "0"+(date2.getMonth()+1)
	}else{
		mon = date2.getMonth()+1
	}
	if(date2.getDate()<10){
		day = "0"+(date2.getDate())
	}else{
		day = date2.getDate()
	}
	var ThisTime = (date2.getFullYear() + "" + mon + "" + day);
	return ThisTime;
}
//js浮点计算bug
//加法
Price.prototype.add = function(a, b) {
    var c, d, e;
    try {
        c = a.toString().split(".")[1].length;
    } catch (f) {
        c = 0;
    }
    try {
        d = b.toString().split(".")[1].length;
    } catch (f) {
        d = 0;
    }
    return e = Math.pow(10, Math.max(c, d)), (this.mul(a, e) + this.mul(b, e)) / e;
}
//乘法
Price.prototype.mul = function(a, b) {
    var c = 0,
        d = a.toString(),
        e = b.toString();
    try {
        c += d.split(".")[1].length;
    } catch (f) {}
    try {
        c += e.split(".")[1].length;
    } catch (f) {}
    return Number(d.replace(".", "")) * Number(e.replace(".", "")) / Math.pow(10, c);
}
Price.prototype.accMul = function(arg1,arg2) {
	var m=0,s1=arg1.toString(),s2=arg2.toString(); 
	try{m+=s1.split(".")[1].length}catch(e){} 
	try{m+=s2.split(".")[1].length}catch(e){} 
	return Number(s1.replace(".",""))*Number(s2.replace(".",""))/Math.pow(10,m)
}
//减法
Price.prototype.sub = function(a, b) {
    var c, d, e;
    try {
        c = a.toString().split(".")[1].length;
    } catch (f) {
        c = 0;
    }
    try {
        d = b.toString().split(".")[1].length;
    } catch (f) {
        d = 0;
    }
    return e = Math.pow(10, Math.max(c, d)), (this.mul(a, e) - this.mul(b, e)) / e;
}
//获取交易所信息数组
Price.prototype.market_code_arr = function(marketinfo){
    var arr = [];
    var MarketArr = [];
    var MarketInformation = ["SHFE","DCE","CZCE","INE","SSE","SZSE","CFFEX","SGE"];
    for(var j=0;j<MarketInformation.length;j++){
    	var obj = [];
        for (var i = 0; i < marketinfo.length; i++) {
            if (marketinfo[i].market == MarketInformation[j]) {
                obj.push(marketinfo[i].code)
            }
        }
        if(obj.length>0){
        	MarketArr.push(MarketInformation[j])
        	arr.push(obj);
        }
    }
    MarketArr.unshift("---");
    arr.unshift(["---"]);
    return [MarketArr,arr]
}
//获取交易所信息对象
Price.prototype.market_code_obj = function(marketinfo){
    var arr = [];
    var MarketArr = [];
    var MarketInformation = ["SHFE","DCE","CZCE","INE","SSE","SZSE","CFFEX","SGE"];
    for(var j=0;j<MarketInformation.length;j++){
    	var obj = [];
        for (var i = 0; i < marketinfo.length; i++) {
            if (marketinfo[i].market == MarketInformation[j]) {
                    var objdd = {};
                    objdd["market"] = marketinfo[i].market;
                    objdd["code"] = marketinfo[i].code;
                    objdd["strike_price_change"] = marketinfo[i].strike_price_change;
                    objdd["interest_rate"] = marketinfo[i].interest_rate;
                obj.push(objdd)
            }
        }
        if(obj.length>0){
        	MarketArr.push(MarketInformation[j])
        	arr.push(obj);
        }
    }
    return [MarketArr,arr]
}
//交易所标的排序
Price.prototype.compare = function (prop) {
    return function (obj1, obj2) {
        var val1 = obj1[prop];
        var val2 = obj2[prop];if (val1 < val2) {
            return -1;
        } else if (val1 > val2) {
            return 1;
        } else {
            return 0;
        }            
    }
}
Price.prototype.by = function(name,minor){
    return function(o,p){
        var a,b;
        if(o && p && typeof o === 'object' && typeof p ==='object'){
            a = o[name];
            b = p[name];
            if(a === b){
                return typeof  minor === 'function' ? minor(o,p):0;
            }
            if(typeof a === typeof b){
                return a <b ? -1:1;
            }
            return typeof  a < typeof b ? -1 : 1;
        }else{
            thro("error");
        }
    }
}

//标的代码排序
Price.prototype.sortingCode = function(argument) {
	for(var i = 0;i<argument.length;i++){
		argument[i].sort(this.compare("code"))
	}
	return argument;
}

Price.prototype.zifuchan = function(d) {
	var arr = d.split("");
	for(var i=0;i<arr.length;i++){
		if(arr[i].charCodeAt() < 255){
			var ind = i;
			break;
		}
	}
    var ne = d.substring(0,ind);
    if(!ne) {
        return d
    }
	return ne
}
 
 //数组对象去重
 Price.prototype._objIsInArray = function(obj,arr){
     let tmpStatus=false;
     for(let j=0;j<arr.length;j++){
       if(obj.text==arr[j].text){
         return j;
         break;
       }else{
         tmpStatus=false;
       }
     }
     if(!tmpStatus){
       return -1;
     }
   }

export default new Price()
   



/* BS from YunHan Tech */ /*var calc={};calc.CalcCall=CalcCall;calc.CalcPut=CalcPut;module.exports=calc; */